import numpy as np
from math import sin, cos

def bisection(fun,lb,ub,err_max=1e-5,iter_max=1000):
    if not callable(fun):
        raise Exception('The first input must be a callable function')
    if lb >= ub:
        raise Exception('Lower bound must be less than the upper bound')
    if not isinstance(lb,float) and not isinstance(lb, int):
        raise Exception('The second and third values must be scalars')
    if not isinstance(ub,float) and not isinstance(ub, int):
        raise Exception('The second and third values must be scalars')
    if (not isinstance(err_max, float) and not isinstance(err_max, int)) or err_max<=0:
        raise Exception('The fourth and fifth inputs must be positive scalar values.')
    if (not isinstance(iter_max, float) and not isinstance(iter_max, int)) or iter_max<=0:
        raise Exception('The fourth and fifth inputs must be positive scalar values.')
    if (fun(ub) > 0 and fun(lb) > 0) or (fun(ub) < 0 and fun(lb) < 0):
        raise Exception('Invalid bracket values!!!!')
    xr = (lb+ub)/2
    done = False
    no_iter = 0
    while not done:
        no_iter += 1
        
        if fun(lb)*fun(xr) < 0:
            ub = xr
        else:
            lb = xr
        err_est = abs((ub-lb)/(ub+lb))*100
        xr = (ub+lb)/2
        if err_est<err_max:
            flag = 1
            break
        elif no_iter > iter_max:
            flag = 0
            break
        elif ub == lb:
            flag = -1
            break
        elif fun(ub) > 0 and fun(lb) > 0 or fun(ub) < 0 and fun(lb) < 0:
            flag = -1
            break
        elif fun(ub) == float('NaN') or fun(lb) == float('NaN') or fun(ub) == float('Inf') or fun(lb) == float('Inf'):
            flag = -1
            break
        if err_est<err_max or no_iter > iter_max:
            done = True
    return xr,err_est,no_iter,flag
